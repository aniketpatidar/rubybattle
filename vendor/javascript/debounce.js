var e=typeof globalThis!=="undefined"?globalThis:typeof self!=="undefined"?self:global;var t={};function debounce(t,o=100,n={}){if(typeof t!=="function")throw new TypeError(`Expected the first parameter to be a function, got \`${typeof t}\`.`);if(o<0)throw new RangeError("`wait` must not be negative.");const{immediate:r}=typeof n==="boolean"?{immediate:n}:n;let i;let a;let u;let c;let l;function run(){const e=i;const o=a;i=void 0;a=void 0;l=t.apply(e,o);return l}function later(){const e=Date.now()-c;if(e<o&&e>=0)u=setTimeout(later,o-e);else{u=void 0;r||(l=run())}}const debounced=function(...t){if(i&&(this||e)!==i)throw new Error("Debounced method called with different contexts.");i=this||e;a=t;c=Date.now();const n=r&&!u;u||(u=setTimeout(later,o));n&&(l=run());return l};debounced.clear=()=>{if(u){clearTimeout(u);u=void 0}};debounced.flush=()=>{u&&debounced.trigger()};debounced.trigger=()=>{l=run();debounced.clear()};return debounced}t.debounce=debounce;t=debounce;var o=t;const n=t.debounce;export{n as debounce,o as default};

